{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c0d27f79",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:19.728426Z",
     "iopub.status.busy": "2025-04-19T18:47:19.727244Z",
     "iopub.status.idle": "2025-04-19T18:47:21.254387Z",
     "shell.execute_reply": "2025-04-19T18:47:21.253121Z"
    },
    "papermill": {
     "duration": 1.535913,
     "end_time": "2025-04-19T18:47:21.256899",
     "exception": false,
     "start_time": "2025-04-19T18:47:19.720986",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/boston-housing-dataset/BostonHousing.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "08cc4c32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:21.268228Z",
     "iopub.status.busy": "2025-04-19T18:47:21.267610Z",
     "iopub.status.idle": "2025-04-19T18:47:23.783692Z",
     "shell.execute_reply": "2025-04-19T18:47:23.782837Z"
    },
    "papermill": {
     "duration": 2.523653,
     "end_time": "2025-04-19T18:47:23.785472",
     "exception": false,
     "start_time": "2025-04-19T18:47:21.261819",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt \n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split \n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "df7899f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:23.794546Z",
     "iopub.status.busy": "2025-04-19T18:47:23.794128Z",
     "iopub.status.idle": "2025-04-19T18:47:23.817081Z",
     "shell.execute_reply": "2025-04-19T18:47:23.816017Z"
    },
    "papermill": {
     "duration": 0.029222,
     "end_time": "2025-04-19T18:47:23.818759",
     "exception": false,
     "start_time": "2025-04-19T18:47:23.789537",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/boston-housing-dataset/BostonHousing.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3e9ec963",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:23.827539Z",
     "iopub.status.busy": "2025-04-19T18:47:23.827236Z",
     "iopub.status.idle": "2025-04-19T18:47:23.855781Z",
     "shell.execute_reply": "2025-04-19T18:47:23.854748Z"
    },
    "papermill": {
     "duration": 0.034349,
     "end_time": "2025-04-19T18:47:23.856959",
     "exception": false,
     "start_time": "2025-04-19T18:47:23.822610",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>crim</th>\n",
       "      <th>zn</th>\n",
       "      <th>indus</th>\n",
       "      <th>chas</th>\n",
       "      <th>nox</th>\n",
       "      <th>rm</th>\n",
       "      <th>age</th>\n",
       "      <th>dis</th>\n",
       "      <th>rad</th>\n",
       "      <th>tax</th>\n",
       "      <th>ptratio</th>\n",
       "      <th>b</th>\n",
       "      <th>lstat</th>\n",
       "      <th>medv</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.00632</td>\n",
       "      <td>18.0</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0</td>\n",
       "      <td>0.538</td>\n",
       "      <td>6.575</td>\n",
       "      <td>65.2</td>\n",
       "      <td>4.0900</td>\n",
       "      <td>1</td>\n",
       "      <td>296</td>\n",
       "      <td>15.3</td>\n",
       "      <td>396.90</td>\n",
       "      <td>4.98</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.02731</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>6.421</td>\n",
       "      <td>78.9</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2</td>\n",
       "      <td>242</td>\n",
       "      <td>17.8</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.14</td>\n",
       "      <td>21.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.02729</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>7.185</td>\n",
       "      <td>61.1</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2</td>\n",
       "      <td>242</td>\n",
       "      <td>17.8</td>\n",
       "      <td>392.83</td>\n",
       "      <td>4.03</td>\n",
       "      <td>34.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.03237</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>6.998</td>\n",
       "      <td>45.8</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3</td>\n",
       "      <td>222</td>\n",
       "      <td>18.7</td>\n",
       "      <td>394.63</td>\n",
       "      <td>2.94</td>\n",
       "      <td>33.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.06905</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>7.147</td>\n",
       "      <td>54.2</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3</td>\n",
       "      <td>222</td>\n",
       "      <td>18.7</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.33</td>\n",
       "      <td>36.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      crim    zn  indus  chas    nox     rm   age     dis  rad  tax  ptratio  \\\n",
       "0  0.00632  18.0   2.31     0  0.538  6.575  65.2  4.0900    1  296     15.3   \n",
       "1  0.02731   0.0   7.07     0  0.469  6.421  78.9  4.9671    2  242     17.8   \n",
       "2  0.02729   0.0   7.07     0  0.469  7.185  61.1  4.9671    2  242     17.8   \n",
       "3  0.03237   0.0   2.18     0  0.458  6.998  45.8  6.0622    3  222     18.7   \n",
       "4  0.06905   0.0   2.18     0  0.458  7.147  54.2  6.0622    3  222     18.7   \n",
       "\n",
       "        b  lstat  medv  \n",
       "0  396.90   4.98  24.0  \n",
       "1  396.90   9.14  21.6  \n",
       "2  392.83   4.03  34.7  \n",
       "3  394.63   2.94  33.4  \n",
       "4  396.90   5.33  36.2  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebf1d273",
   "metadata": {
    "papermill": {
     "duration": 0.003499,
     "end_time": "2025-04-19T18:47:23.864583",
     "exception": false,
     "start_time": "2025-04-19T18:47:23.861084",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "| Column Name | Description |\n",
    "|-------------|-------------|\n",
    "| `crim` | Per capita crime rate by town |\n",
    "| `zn` | Proportion of residential land zoned for lots over 25,000 sq.ft |\n",
    "| `indus` | Proportion of non-retail business acres per town |\n",
    "| `chas` | Charles River dummy variable (=1 if tract bounds river; 0 otherwise) |\n",
    "| `nox` | Nitric oxide concentration (parts per 10 million) |\n",
    "| `rm` | Average number of rooms per dwelling |\n",
    "| `age` | Proportion of owner-occupied units built before 1940 |\n",
    "| `dis` | Weighted distances to five Boston employment centers |\n",
    "| `rad` | Index of accessibility to radial highways |\n",
    "| `tax` | Full-value property-tax rate per \\$10,000 |\n",
    "| `ptratio` | Pupil-teacher ratio by town |\n",
    "| `b` | 1000 × (Bk - 0.63)² where Bk is the proportion of Black residents by town |\n",
    "| `lstat` | Percentage of lower status of the population |\n",
    "| `medv` | Median value of owner-occupied homes in \\$1000s (TARGET) |\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "713272c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:23.872940Z",
     "iopub.status.busy": "2025-04-19T18:47:23.872674Z",
     "iopub.status.idle": "2025-04-19T18:47:23.878319Z",
     "shell.execute_reply": "2025-04-19T18:47:23.877294Z"
    },
    "papermill": {
     "duration": 0.011645,
     "end_time": "2025-04-19T18:47:23.879771",
     "exception": false,
     "start_time": "2025-04-19T18:47:23.868126",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(506, 14)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d0e19b79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:23.889213Z",
     "iopub.status.busy": "2025-04-19T18:47:23.888929Z",
     "iopub.status.idle": "2025-04-19T18:47:23.907580Z",
     "shell.execute_reply": "2025-04-19T18:47:23.906769Z"
    },
    "papermill": {
     "duration": 0.025004,
     "end_time": "2025-04-19T18:47:23.909015",
     "exception": false,
     "start_time": "2025-04-19T18:47:23.884011",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>crim</th>\n",
       "      <th>zn</th>\n",
       "      <th>indus</th>\n",
       "      <th>chas</th>\n",
       "      <th>nox</th>\n",
       "      <th>rm</th>\n",
       "      <th>age</th>\n",
       "      <th>dis</th>\n",
       "      <th>rad</th>\n",
       "      <th>tax</th>\n",
       "      <th>ptratio</th>\n",
       "      <th>b</th>\n",
       "      <th>lstat</th>\n",
       "      <th>medv</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>crim</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.200469</td>\n",
       "      <td>0.406583</td>\n",
       "      <td>-0.055892</td>\n",
       "      <td>0.420972</td>\n",
       "      <td>-0.219433</td>\n",
       "      <td>0.352734</td>\n",
       "      <td>-0.379670</td>\n",
       "      <td>0.625505</td>\n",
       "      <td>0.582764</td>\n",
       "      <td>0.289946</td>\n",
       "      <td>-0.385064</td>\n",
       "      <td>0.455621</td>\n",
       "      <td>-0.388305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zn</th>\n",
       "      <td>-0.200469</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.533828</td>\n",
       "      <td>-0.042697</td>\n",
       "      <td>-0.516604</td>\n",
       "      <td>0.311173</td>\n",
       "      <td>-0.569537</td>\n",
       "      <td>0.664408</td>\n",
       "      <td>-0.311948</td>\n",
       "      <td>-0.314563</td>\n",
       "      <td>-0.391679</td>\n",
       "      <td>0.175520</td>\n",
       "      <td>-0.412995</td>\n",
       "      <td>0.360445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>indus</th>\n",
       "      <td>0.406583</td>\n",
       "      <td>-0.533828</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.062938</td>\n",
       "      <td>0.763651</td>\n",
       "      <td>-0.394193</td>\n",
       "      <td>0.644779</td>\n",
       "      <td>-0.708027</td>\n",
       "      <td>0.595129</td>\n",
       "      <td>0.720760</td>\n",
       "      <td>0.383248</td>\n",
       "      <td>-0.356977</td>\n",
       "      <td>0.603800</td>\n",
       "      <td>-0.483725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chas</th>\n",
       "      <td>-0.055892</td>\n",
       "      <td>-0.042697</td>\n",
       "      <td>0.062938</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.091203</td>\n",
       "      <td>0.091468</td>\n",
       "      <td>0.086518</td>\n",
       "      <td>-0.099176</td>\n",
       "      <td>-0.007368</td>\n",
       "      <td>-0.035587</td>\n",
       "      <td>-0.121515</td>\n",
       "      <td>0.048788</td>\n",
       "      <td>-0.053929</td>\n",
       "      <td>0.175260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nox</th>\n",
       "      <td>0.420972</td>\n",
       "      <td>-0.516604</td>\n",
       "      <td>0.763651</td>\n",
       "      <td>0.091203</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.302751</td>\n",
       "      <td>0.731470</td>\n",
       "      <td>-0.769230</td>\n",
       "      <td>0.611441</td>\n",
       "      <td>0.668023</td>\n",
       "      <td>0.188933</td>\n",
       "      <td>-0.380051</td>\n",
       "      <td>0.590879</td>\n",
       "      <td>-0.427321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rm</th>\n",
       "      <td>-0.219433</td>\n",
       "      <td>0.311173</td>\n",
       "      <td>-0.394193</td>\n",
       "      <td>0.091468</td>\n",
       "      <td>-0.302751</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.240286</td>\n",
       "      <td>0.203507</td>\n",
       "      <td>-0.210718</td>\n",
       "      <td>-0.292794</td>\n",
       "      <td>-0.357612</td>\n",
       "      <td>0.128107</td>\n",
       "      <td>-0.615721</td>\n",
       "      <td>0.696169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>0.352734</td>\n",
       "      <td>-0.569537</td>\n",
       "      <td>0.644779</td>\n",
       "      <td>0.086518</td>\n",
       "      <td>0.731470</td>\n",
       "      <td>-0.240286</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.747881</td>\n",
       "      <td>0.456022</td>\n",
       "      <td>0.506456</td>\n",
       "      <td>0.261515</td>\n",
       "      <td>-0.273534</td>\n",
       "      <td>0.602339</td>\n",
       "      <td>-0.376955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dis</th>\n",
       "      <td>-0.379670</td>\n",
       "      <td>0.664408</td>\n",
       "      <td>-0.708027</td>\n",
       "      <td>-0.099176</td>\n",
       "      <td>-0.769230</td>\n",
       "      <td>0.203507</td>\n",
       "      <td>-0.747881</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.494588</td>\n",
       "      <td>-0.534432</td>\n",
       "      <td>-0.232471</td>\n",
       "      <td>0.291512</td>\n",
       "      <td>-0.496996</td>\n",
       "      <td>0.249929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rad</th>\n",
       "      <td>0.625505</td>\n",
       "      <td>-0.311948</td>\n",
       "      <td>0.595129</td>\n",
       "      <td>-0.007368</td>\n",
       "      <td>0.611441</td>\n",
       "      <td>-0.210718</td>\n",
       "      <td>0.456022</td>\n",
       "      <td>-0.494588</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.910228</td>\n",
       "      <td>0.464741</td>\n",
       "      <td>-0.444413</td>\n",
       "      <td>0.488676</td>\n",
       "      <td>-0.381626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tax</th>\n",
       "      <td>0.582764</td>\n",
       "      <td>-0.314563</td>\n",
       "      <td>0.720760</td>\n",
       "      <td>-0.035587</td>\n",
       "      <td>0.668023</td>\n",
       "      <td>-0.292794</td>\n",
       "      <td>0.506456</td>\n",
       "      <td>-0.534432</td>\n",
       "      <td>0.910228</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.460853</td>\n",
       "      <td>-0.441808</td>\n",
       "      <td>0.543993</td>\n",
       "      <td>-0.468536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ptratio</th>\n",
       "      <td>0.289946</td>\n",
       "      <td>-0.391679</td>\n",
       "      <td>0.383248</td>\n",
       "      <td>-0.121515</td>\n",
       "      <td>0.188933</td>\n",
       "      <td>-0.357612</td>\n",
       "      <td>0.261515</td>\n",
       "      <td>-0.232471</td>\n",
       "      <td>0.464741</td>\n",
       "      <td>0.460853</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.177383</td>\n",
       "      <td>0.374044</td>\n",
       "      <td>-0.507787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b</th>\n",
       "      <td>-0.385064</td>\n",
       "      <td>0.175520</td>\n",
       "      <td>-0.356977</td>\n",
       "      <td>0.048788</td>\n",
       "      <td>-0.380051</td>\n",
       "      <td>0.128107</td>\n",
       "      <td>-0.273534</td>\n",
       "      <td>0.291512</td>\n",
       "      <td>-0.444413</td>\n",
       "      <td>-0.441808</td>\n",
       "      <td>-0.177383</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.366087</td>\n",
       "      <td>0.333461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lstat</th>\n",
       "      <td>0.455621</td>\n",
       "      <td>-0.412995</td>\n",
       "      <td>0.603800</td>\n",
       "      <td>-0.053929</td>\n",
       "      <td>0.590879</td>\n",
       "      <td>-0.615721</td>\n",
       "      <td>0.602339</td>\n",
       "      <td>-0.496996</td>\n",
       "      <td>0.488676</td>\n",
       "      <td>0.543993</td>\n",
       "      <td>0.374044</td>\n",
       "      <td>-0.366087</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.737663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>medv</th>\n",
       "      <td>-0.388305</td>\n",
       "      <td>0.360445</td>\n",
       "      <td>-0.483725</td>\n",
       "      <td>0.175260</td>\n",
       "      <td>-0.427321</td>\n",
       "      <td>0.696169</td>\n",
       "      <td>-0.376955</td>\n",
       "      <td>0.249929</td>\n",
       "      <td>-0.381626</td>\n",
       "      <td>-0.468536</td>\n",
       "      <td>-0.507787</td>\n",
       "      <td>0.333461</td>\n",
       "      <td>-0.737663</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             crim        zn     indus      chas       nox        rm       age  \\\n",
       "crim     1.000000 -0.200469  0.406583 -0.055892  0.420972 -0.219433  0.352734   \n",
       "zn      -0.200469  1.000000 -0.533828 -0.042697 -0.516604  0.311173 -0.569537   \n",
       "indus    0.406583 -0.533828  1.000000  0.062938  0.763651 -0.394193  0.644779   \n",
       "chas    -0.055892 -0.042697  0.062938  1.000000  0.091203  0.091468  0.086518   \n",
       "nox      0.420972 -0.516604  0.763651  0.091203  1.000000 -0.302751  0.731470   \n",
       "rm      -0.219433  0.311173 -0.394193  0.091468 -0.302751  1.000000 -0.240286   \n",
       "age      0.352734 -0.569537  0.644779  0.086518  0.731470 -0.240286  1.000000   \n",
       "dis     -0.379670  0.664408 -0.708027 -0.099176 -0.769230  0.203507 -0.747881   \n",
       "rad      0.625505 -0.311948  0.595129 -0.007368  0.611441 -0.210718  0.456022   \n",
       "tax      0.582764 -0.314563  0.720760 -0.035587  0.668023 -0.292794  0.506456   \n",
       "ptratio  0.289946 -0.391679  0.383248 -0.121515  0.188933 -0.357612  0.261515   \n",
       "b       -0.385064  0.175520 -0.356977  0.048788 -0.380051  0.128107 -0.273534   \n",
       "lstat    0.455621 -0.412995  0.603800 -0.053929  0.590879 -0.615721  0.602339   \n",
       "medv    -0.388305  0.360445 -0.483725  0.175260 -0.427321  0.696169 -0.376955   \n",
       "\n",
       "              dis       rad       tax   ptratio         b     lstat      medv  \n",
       "crim    -0.379670  0.625505  0.582764  0.289946 -0.385064  0.455621 -0.388305  \n",
       "zn       0.664408 -0.311948 -0.314563 -0.391679  0.175520 -0.412995  0.360445  \n",
       "indus   -0.708027  0.595129  0.720760  0.383248 -0.356977  0.603800 -0.483725  \n",
       "chas    -0.099176 -0.007368 -0.035587 -0.121515  0.048788 -0.053929  0.175260  \n",
       "nox     -0.769230  0.611441  0.668023  0.188933 -0.380051  0.590879 -0.427321  \n",
       "rm       0.203507 -0.210718 -0.292794 -0.357612  0.128107 -0.615721  0.696169  \n",
       "age     -0.747881  0.456022  0.506456  0.261515 -0.273534  0.602339 -0.376955  \n",
       "dis      1.000000 -0.494588 -0.534432 -0.232471  0.291512 -0.496996  0.249929  \n",
       "rad     -0.494588  1.000000  0.910228  0.464741 -0.444413  0.488676 -0.381626  \n",
       "tax     -0.534432  0.910228  1.000000  0.460853 -0.441808  0.543993 -0.468536  \n",
       "ptratio -0.232471  0.464741  0.460853  1.000000 -0.177383  0.374044 -0.507787  \n",
       "b        0.291512 -0.444413 -0.441808 -0.177383  1.000000 -0.366087  0.333461  \n",
       "lstat   -0.496996  0.488676  0.543993  0.374044 -0.366087  1.000000 -0.737663  \n",
       "medv     0.249929 -0.381626 -0.468536 -0.507787  0.333461 -0.737663  1.000000  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plt.rcParams[\"figure.figsize\"]=[8,6]   \n",
    "#Think of it like setting the theme or default style for all your future plots.\n",
    "corr = df.corr()\n",
    "corr\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3a48b5a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:23.918662Z",
     "iopub.status.busy": "2025-04-19T18:47:23.918369Z",
     "iopub.status.idle": "2025-04-19T18:47:24.256321Z",
     "shell.execute_reply": "2025-04-19T18:47:24.254429Z"
    },
    "papermill": {
     "duration": 0.345032,
     "end_time": "2025-04-19T18:47:24.258511",
     "exception": false,
     "start_time": "2025-04-19T18:47:23.913479",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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EeLpEEwv+J3zdAimXku9q0b01rXHPR2CVzAMFod3hnf9FgMAAKBSotIJAADgCu5edwpJJwAAgCu4kcgpDK8DAADA7ah0AgAAuILhdadQ6QQAAIDbUekEAABwhYMlk5xBpRMAAABuR6UTAADAFczpdAqVTgAAALgdlU4AAABXsE6nU0g6AQAAXMHwulMqxPB6bm6ubDZbsS0pKUnz5s1TWFiYVqxYodjYWAUFBalr167av3+/p8MGAADAf1WIpLN+/frav3+/uW3btk01a9bUDTfcIEk6ffq0Jk2apAULFujLL79UXl6ehg0b5uGoAQBApeZwuG+rhCpE0unr66uIiAhFREQoLCxMjzzyiNq2batx48ZJks6ePatZs2apdevWuuaaa5SamqrVq1d7NmgAAIBLaMaMGYqKipK/v78SExO1cePG8/afOnWqYmJiFBAQoPr162vo0KH67bff3BZfhZvT+eCDD+rEiRNatWqVfHx+z5kDAwPVqFEjs09kZKQOHjxY6jEKCgpUUFBgaTtnFKmKzdc9QQMAgMrHiyqS7777rtLS0jRr1iwlJiZq6tSp6tKli3bv3q06deoU679o0SI9/fTTmjNnjtq1a6c9e/aob9++stlsmjJliltirBCVzj88//zzWrFihT7++GMFBweb7VWrVrX0s9lsMgyj1ONkZGQoNDTUsv372E63xQ0AAOBOU6ZM0YABA9SvXz/FxcVp1qxZCgwM1Jw5c0rsv27dOrVv3169evVSVFSUOnfurJ49e16wOnoxKkzS+f7772v8+PFasmSJparpivT0dB07dsyydQhtVk6RAgCAy4FhFLltc0ZhYaG2bNmi5ORks83Hx0fJyclav359ifu0a9dOW7ZsMZPMffv2admyZbr11ltdf0EuoEIMr+/YsUN9+vTRiBEj1KxZM+Xn50uS/Pz8XDqe3W6X3W63tDG0DgAAvEVJUwFLyl8k6dChQyoqKlJ4eLilPTw8XLt27Srx+L169dKhQ4fUoUMHGYahc+fO6ZFHHtEzzzxTfhfxFxWi0rl582adPn1azz//vCIjI83t7rvv9nRoAADgcuXGu9dLmgqYkZFRbqFnZmbqxRdf1MyZM7V161Z98MEH+vTTT/Xcc8+V2zn+qkJUOvv27au+ffue9/k/u/POO887pxMAAOCiuXFx+PT0dKWlpVnaSqpySlKt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PDxcV199tV588UUVFRVd1EtyPlQ6AQAAvExBQYEKCgosbXa7XXa7vVjfQ4cOqaioSOHh4Zb28PBw7dq1q8Tj79u3T2vWrFFKSoqWLVum7777ToMGDdLZs2c1duzY8ruQP6HSCQAA4Ao3VjozMjIUGhpq2TIyMsoxdIfq1Kmj119/Xa1atVKPHj00cuRIzZo1q9zO8VdUOgEAALxMenq60tLSLG0lVTklqVatWvL19dWBAwcs7QcOHFBERESJ+0RGRqpq1ary9fU122JjY5Wfn6/CwkL5+fld5BUUR6UTAADAFYbhts1utyskJMSylZZ0+vn5qVWrVlq9erXZ5nA4tHr1arVt27bEfdq3b6/vvvtOjj/NH92zZ48iIyPdknBKJJ0AAAAVXlpammbPnq358+crOztbjz76qE6dOmXezd6nTx+lp6eb/R999FEdOXJETzzxhPbs2aNPP/1UL774oh577DG3xejx4fXc3FxdddVV2rZtm1q0aOHpcAAAAMrGi74Gs0ePHvrll180ZswY5efnq0WLFlq+fLl5c1FeXp58fP6v1li/fn2tWLFCQ4cOVfPmzVWvXj098cQTGjFihNti9HjSCQAAUCF50eLwkpSamqrU1NQSn8vMzCzW1rZtW3311Vdujur/MLwOAAAAt7tkSafD4dDEiRPVuHFj2e12NWjQQC+88IL5/L59+3TjjTcqMDBQCQkJlsVMDx8+rJ49e6pevXoKDAxUfHy83nnnHcvx//GPfyg+Pl4BAQGqWbOmkpOTderUqUt1eQAA4HLjZd+97u0uWdKZnp6ul156SaNHj9a3336rRYsWWRYxHTlypIYNG6asrCw1adJEPXv21Llz5yRJv/32m1q1aqVPP/1UO3bs0MCBA9W7d2/zi+z379+vnj176sEHH1R2drYyMzN19913yzC8q+wNAABwubokczpPnDihadOm6bXXXtMDDzwgSWrUqJE6dOig3NxcSdKwYcN02223SZKeffZZNWvWTN99952aNm2qevXqadiwYebxHn/8ca1YsUJLlixRmzZttH//fp07d0533323rrzySklSfHz8pbg0AABwufKyOZ3e7pIkndnZ2SooKFCnTp1K7dO8eXPz58jISEnSwYMH1bRpUxUVFenFF1/UkiVL9NNPP6mwsFAFBQUKDAyUJCUkJKhTp06Kj49Xly5d1Llz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uk7nkSNHlJKSopCQEIWFhal///46efLkBfdbv369brrpJlWrVk0hISG64YYbdObMmTKf1yPD6//85z+1b98+3XDDDapevbqWLVsmh8OhmJgYSVJUVJQ2bNig3NxcBQUFqUaNGoqOjtZbb72lFStW6KqrrtKCBQu0adMmXXXVVeZxo6KitGLFCu3evVs1a9ZUaGioqlatWuz8drtddrvd0naCoXUAAOCEijq8npKSov3792vVqlU6e/as+vXrp4EDB2rRokWl7rN+/Xp17dpV6enpmj59uqpUqaKvv/5aPj5lr196pNIZFhamDz74QDfddJNiY2M1a9YsvfPOO2rWrJkkadiwYfL19VVcXJxq166tvLw8Pfzww7r77rvVo0cPJSYm6vDhwxo0aJDluAMGDFBMTIxat26t2rVra+3atZ64PAAAAK+UnZ2t5cuX64033lBiYqI6dOig6dOna/Hixfr5559L3W/o0KEaPHiwnn76aTVr1kwxMTHq3r17sSLe+VzSSuef18083xqaTZo00fr164u1z50711wO6Q8ZGRnmz7Vr19bKlSsvOk4AAIALcecweEk3PZc0Uuus9evXKywsTK1btzbbkpOT5ePjow0bNuiuu+4qts/Bgwe1YcMGpaSkqF27dsrJyVHTpk31wgsvqEOHDmU+t1d+DSYAAMDlrKSbnv9caHNVfn6+6tSpY2mrUqWKatSoofz8/BL32bdvn6Tfv4hnwIABWr58ua655hp16tRJe/fuLfO5SToBAABc4DAMt20l3fScnp5eaixPP/20+Y2MpW27du1y7TodDknSww8/rH79+qlly5Z65ZVXFBMTozlz5pT5OHz3OgAAgJdxdij9ySefVN++fc/bp2HDhoqIiNDBgwct7efOndORI0dK/XKdyMhISVJcXJylPTY2Vnl5eWWOkaQTAADABd70NZi1a9dW7dq1L9ivbdu2Onr0qLZs2aJWrVpJktasWSOHw6HExMQS94mKilLdunW1e/duS/uePXt0yy23lDlGhtcBAAAuE7GxseratasGDBigjRs3au3atUpNTdV9992nunXrSpJ++uknNW3aVBs3bpQk2Ww2DR8+XK+++qr+8Y9/6LvvvtPo0aO1a9cu9e/fv8znptIJAADgAsNweDoElyxcuFCpqanq1KmTfHx89Le//U2vvvqq+fzZs2e1e/du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77//3pBkREVFGe+//76xb98+4+effzbmzp1rhIaGmvuPHTvWCAoKMu655x5j586dxscff2z4+fkZXbp0MR5//HFj165dxpw5cwxJxldffeVynOfOnTP2799vbtu2bTNq1qxpjB492pg7d65RtWpVIzk52di0aZOxZcsWIzY21ujVq5dT5+jYsaPxxBNPGIZhGFdeeaVRo0YNY8aMGcbevXuNjIwMw8fHx9i1a5dhGIZx4sQJo3bt2kavXr2MHTt2GJ988onRsGFDQ5Kxbds2wzCMYq+VYRjGhx9+aPz517FZs2bG/fffb2RnZxt79uwxlixZYmRlZRWL7ULvU9OmTY1//vOfxu7du4177rnHuPLKK42zZ88ahmEY//nPf4yXX37Z2LZtm5GTk2O8+uqrhq+vr7FhwwbDMAzj559/NqpUqWJMmTLF+P77743t27cbM2bMME6cOFGm1ywkJMQYN26csWfPHmP+/PmGzWYzVq5caRQVFRktWrQwOnToYGzevNn46quvjFatWhkdO3Y0958xY4YRGhpq/PDDD8aPP/5oVK9e3Zg2bVpZ37ILxhYUFGQMHz7c2LVrlzFr1ixDknHdddcZ//73v42tW7cajRs3Njp27Gh07tzZ2Lp1q/Hll18aNWvWNF566aVyieEf//iH8f777xt79+41tm3bZnTr1s2Ij483ioqKjGPHjhk1atQw7r//fmPnzp3GsmXLjCZNmlh+h3799Vejdu3aRnp6upGdnW1s3brVuPnmm40bb7zxouJ69NFHjQYNGhj/+te/jO3btxu33367ERwcbPn9f+WVVwzDMIz33nvPCAkJMZYtW2b88MMPxoYNG4zXX3/9os5vGMXfn127dhmvvPKKsWbNGuP77783Vq9ebcTExBiPPvqouc9XX31l+Pj4GBMmTDB2795tTJs2zQgLCyv2OXPW0aNHjbZt2xoDBgww/8b89ttvxpgxY4xNmzYZ+/btM95++20jMDDQePfdd839tm3bZvj5+RlLly41zp07Z1x33XXGXXfdVeq1PvHEE8auXbvMY73++uvG4cOHjSuuuMIYP368eW7DMMy/a+3atTPWrl1r7Nq1yzh16pSxevVqY8GCBUZ2drbx7bffGv379zfCw8ON48ePG4ZhGAcPHjQkGXPnzjX2799vHDx40DCM3/9WJyQkmDFNmTLFCAkJMd55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WZY+gwcP1vLlyzVp0iTt3btXr732mst3XP9VVFSUNmzYoNzcXB06dEjR0dHavHmzVqxYoT179mj06NHF/qdgxowZWr9+vebPn6+UlBTdeeedSklJKbGSlpeXp7S0NO3evVvvvPOOpk+frieeeMI895dffqmffvrpgisTREdHa8GCBcrOztaGDRuUkpJSbDQkKipKq1evVn5+fqlTZYYPH64JEybo3Xff1e7du/X0008rKyvLjMkZ57u28vLPf/5Tr776qrKysvTDDz/orbfeksPhMIem//r+ORyOMr2HUVFR2r59u3bv3q1Dhw5dVAX/Qp9XZz57KSkpWrx4sd577z2G1isgks5SjB49Wk8++aTGjBmj2NhY9ejRo9zms5WnzZs36/Tp03r++ecVGRlpbnfffbdH4gkKCtInn3yib775Ri1bttTIkSM1YcIES58aNWro7bff1rJly8xliv68nJCvr68OHz6sPn36qEmTJurevbtuueUWPfvss8XOdzHv06hRo3TNNdeoS5cuSkpKUkREhGUx5JCQEH355Ze69dZb1aRJE40aNUqTJ0/WLbfc4tJr8webzaaPPvpI1atX1w033KDk5GQ1bNhQ7777riTprbfe0rJly7RgwQJVqVJF1apV09tvv63Zs2dbliCpqHx8fLR48WJt2bJFV199tYYOHaqXX37ZfD4kJESffPKJsrKy1KJFC40cOVJjxoyRJHOe5x/VqKKiInXu3Fnx8fEaMmSIwsLCXF6vUfp9ysX111+vbt26KTk5WR06dChx/qskhYWFafbs2Wrfvr2aN2+uf/3rX/rkk09KnbvoqoSEBE2ZMkUTJkzQ1VdfrYULFyojI8PS57rrrtPs2bM1bdo0JSQkaOXKlRo1alS5nH/YsGHy9fVVXFycateurS5duujuu+9Wjx49lJiYqMOHD2vQoEFm/127dmn48OGaOXOmOW955syZOnTokEaPHl3s+H369NGZM2fUpk0bPfbYY3riiSfM5ZbGjx+v3NxcNWrU6IJrpL755pv69ddfdc0116h3794aPHhwsSrY5MmTtWrVKtWvX18tW7Ys8TiDBw9WWlqannzyScXHx2v58uX6+OOPFR0d7dTrdqFrKy9hYWH64IMPdNNNNyk2NlazZs3SO++8o2bNmkkq/v7l5eXp4YcfPu97KEkDBgxQTEyMWrdurdq1axer/jqjLJ/Xsn727rnnHnM+M4vXVzw242In+AGAmy1cuFD9+vXTsWPHKu2XMFyOkpKS1KJFiwrz1aIALg7fSATA67z11ltq2LCh6tWrp6+//lojRoxQ9+7dSTgBoAIj6QTgdfLz8zVmzBjl5+crMjJS995770V/excAwLMYXgcAAIDbcSMRAAAA3I6kEwAAAG5H0gkAAAC3I+kEAACA25F0AgAAwO1IOgEAAOB2JJ0AAABwO5JOAAAAuB1JJwAAANzu/wM7O8ius/rQaQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(corr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9922be86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:24.270454Z",
     "iopub.status.busy": "2025-04-19T18:47:24.270129Z",
     "iopub.status.idle": "2025-04-19T18:47:24.276952Z",
     "shell.execute_reply": "2025-04-19T18:47:24.276154Z"
    },
    "papermill": {
     "duration": 0.013729,
     "end_time": "2025-04-19T18:47:24.278223",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.264494",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "crim       0\n",
       "zn         0\n",
       "indus      0\n",
       "chas       0\n",
       "nox        0\n",
       "rm         5\n",
       "age        0\n",
       "dis        0\n",
       "rad        0\n",
       "tax        0\n",
       "ptratio    0\n",
       "b          0\n",
       "lstat      0\n",
       "medv       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4ae5f626",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:24.290048Z",
     "iopub.status.busy": "2025-04-19T18:47:24.289773Z",
     "iopub.status.idle": "2025-04-19T18:47:24.297292Z",
     "shell.execute_reply": "2025-04-19T18:47:24.296413Z"
    },
    "papermill": {
     "duration": 0.014976,
     "end_time": "2025-04-19T18:47:24.298828",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.283852",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.dropna(axis=0,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "36535313",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:24.310982Z",
     "iopub.status.busy": "2025-04-19T18:47:24.310558Z",
     "iopub.status.idle": "2025-04-19T18:47:24.320504Z",
     "shell.execute_reply": "2025-04-19T18:47:24.319270Z"
    },
    "papermill": {
     "duration": 0.018515,
     "end_time": "2025-04-19T18:47:24.322475",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.303960",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "crim       0\n",
       "zn         0\n",
       "indus      0\n",
       "chas       0\n",
       "nox        0\n",
       "rm         0\n",
       "age        0\n",
       "dis        0\n",
       "rad        0\n",
       "tax        0\n",
       "ptratio    0\n",
       "b          0\n",
       "lstat      0\n",
       "medv       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e08ad249",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:24.336793Z",
     "iopub.status.busy": "2025-04-19T18:47:24.336460Z",
     "iopub.status.idle": "2025-04-19T18:47:24.350603Z",
     "shell.execute_reply": "2025-04-19T18:47:24.348677Z"
    },
    "papermill": {
     "duration": 0.022756,
     "end_time": "2025-04-19T18:47:24.352665",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.329909",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df.drop([\"medv\"],axis=1)\n",
    "y = df.filter([\"medv\"],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "66e194b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:24.363842Z",
     "iopub.status.busy": "2025-04-19T18:47:24.363530Z",
     "iopub.status.idle": "2025-04-19T18:47:24.379318Z",
     "shell.execute_reply": "2025-04-19T18:47:24.377916Z"
    },
    "papermill": {
     "duration": 0.022894,
     "end_time": "2025-04-19T18:47:24.380776",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.357882",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>crim</th>\n",
       "      <th>zn</th>\n",
       "      <th>indus</th>\n",
       "      <th>chas</th>\n",
       "      <th>nox</th>\n",
       "      <th>rm</th>\n",
       "      <th>age</th>\n",
       "      <th>dis</th>\n",
       "      <th>rad</th>\n",
       "      <th>tax</th>\n",
       "      <th>ptratio</th>\n",
       "      <th>b</th>\n",
       "      <th>lstat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.00632</td>\n",
       "      <td>18.0</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0</td>\n",
       "      <td>0.538</td>\n",
       "      <td>6.575</td>\n",
       "      <td>65.2</td>\n",
       "      <td>4.0900</td>\n",
       "      <td>1</td>\n",
       "      <td>296</td>\n",
       "      <td>15.3</td>\n",
       "      <td>396.90</td>\n",
       "      <td>4.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.02731</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>6.421</td>\n",
       "      <td>78.9</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2</td>\n",
       "      <td>242</td>\n",
       "      <td>17.8</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.02729</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>7.185</td>\n",
       "      <td>61.1</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2</td>\n",
       "      <td>242</td>\n",
       "      <td>17.8</td>\n",
       "      <td>392.83</td>\n",
       "      <td>4.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.03237</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>6.998</td>\n",
       "      <td>45.8</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3</td>\n",
       "      <td>222</td>\n",
       "      <td>18.7</td>\n",
       "      <td>394.63</td>\n",
       "      <td>2.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.06905</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>7.147</td>\n",
       "      <td>54.2</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3</td>\n",
       "      <td>222</td>\n",
       "      <td>18.7</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      crim    zn  indus  chas    nox     rm   age     dis  rad  tax  ptratio  \\\n",
       "0  0.00632  18.0   2.31     0  0.538  6.575  65.2  4.0900    1  296     15.3   \n",
       "1  0.02731   0.0   7.07     0  0.469  6.421  78.9  4.9671    2  242     17.8   \n",
       "2  0.02729   0.0   7.07     0  0.469  7.185  61.1  4.9671    2  242     17.8   \n",
       "3  0.03237   0.0   2.18     0  0.458  6.998  45.8  6.0622    3  222     18.7   \n",
       "4  0.06905   0.0   2.18     0  0.458  7.147  54.2  6.0622    3  222     18.7   \n",
       "\n",
       "        b  lstat  \n",
       "0  396.90   4.98  \n",
       "1  396.90   9.14  \n",
       "2  392.83   4.03  \n",
       "3  394.63   2.94  \n",
       "4  396.90   5.33  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "adaa3a5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:24.392582Z",
     "iopub.status.busy": "2025-04-19T18:47:24.392178Z",
     "iopub.status.idle": "2025-04-19T18:47:24.401796Z",
     "shell.execute_reply": "2025-04-19T18:47:24.400450Z"
    },
    "papermill": {
     "duration": 0.01718,
     "end_time": "2025-04-19T18:47:24.403140",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.385960",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>medv</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>21.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>34.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>36.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   medv\n",
       "0  24.0\n",
       "1  21.6\n",
       "2  34.7\n",
       "3  33.4\n",
       "4  36.2"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "56cb786c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:24.415689Z",
     "iopub.status.busy": "2025-04-19T18:47:24.415370Z",
     "iopub.status.idle": "2025-04-19T18:47:24.422361Z",
     "shell.execute_reply": "2025-04-19T18:47:24.421288Z"
    },
    "papermill": {
     "duration": 0.015666,
     "end_time": "2025-04-19T18:47:24.424147",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.408481",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e9f83d87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:24.437098Z",
     "iopub.status.busy": "2025-04-19T18:47:24.436798Z",
     "iopub.status.idle": "2025-04-19T18:47:24.473842Z",
     "shell.execute_reply": "2025-04-19T18:47:24.472701Z"
    },
    "papermill": {
     "duration": 0.045189,
     "end_time": "2025-04-19T18:47:24.475584",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.430395",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "house_predictor = LinearRegression()\n",
    "house_predictor.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f0c7c50c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:24.487905Z",
     "iopub.status.busy": "2025-04-19T18:47:24.487575Z",
     "iopub.status.idle": "2025-04-19T18:47:24.497626Z",
     "shell.execute_reply": "2025-04-19T18:47:24.496159Z"
    },
    "papermill": {
     "duration": 0.018253,
     "end_time": "2025-04-19T18:47:24.499555",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.481302",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[10.18296392],\n",
       "       [22.90028638],\n",
       "       [15.7250715 ],\n",
       "       [32.8687425 ],\n",
       "       [23.06305477],\n",
       "       [11.7105764 ],\n",
       "       [12.82823273],\n",
       "       [19.68402832],\n",
       "       [21.37844603],\n",
       "       [11.6664091 ],\n",
       "       [18.68922207],\n",
       "       [30.07985757],\n",
       "       [-1.00929105],\n",
       "       [25.84534881],\n",
       "       [ 2.71769491],\n",
       "       [ 8.42105272],\n",
       "       [24.20065448],\n",
       "       [18.58158855],\n",
       "       [25.35750486],\n",
       "       [-6.4156406 ],\n",
       "       [13.40087749],\n",
       "       [19.1553702 ],\n",
       "       [26.97331835],\n",
       "       [19.7365225 ],\n",
       "       [22.34723932],\n",
       "       [16.49474319],\n",
       "       [28.88299512],\n",
       "       [25.84032247],\n",
       "       [18.44473853],\n",
       "       [21.44179917],\n",
       "       [20.47924119],\n",
       "       [30.65762986],\n",
       "       [18.03142754],\n",
       "       [31.7042724 ],\n",
       "       [31.32197253],\n",
       "       [22.39925592],\n",
       "       [ 7.89877816],\n",
       "       [23.82379177],\n",
       "       [ 8.79518229],\n",
       "       [24.80967266],\n",
       "       [13.11828624],\n",
       "       [36.50280369],\n",
       "       [14.21716209],\n",
       "       [30.64314489],\n",
       "       [13.08150701],\n",
       "       [28.62892717],\n",
       "       [30.41900005],\n",
       "       [20.22002346],\n",
       "       [18.50467142],\n",
       "       [13.74969166],\n",
       "       [24.00007979],\n",
       "       [33.05373811],\n",
       "       [16.31792202],\n",
       "       [11.83136693],\n",
       "       [34.38516527],\n",
       "       [33.21409913],\n",
       "       [17.58969598],\n",
       "       [18.73951491],\n",
       "       [15.77944095],\n",
       "       [27.36843691],\n",
       "       [20.56962491],\n",
       "       [41.00811461],\n",
       "       [20.7069354 ],\n",
       "       [ 7.90355031],\n",
       "       [26.05404575],\n",
       "       [28.09290827],\n",
       "       [11.99510305],\n",
       "       [ 7.63645472],\n",
       "       [27.23768211],\n",
       "       [16.49955956],\n",
       "       [23.31864783],\n",
       "       [14.72891378],\n",
       "       [40.15780832],\n",
       "       [28.66567671],\n",
       "       [23.21450156],\n",
       "       [23.90785079],\n",
       "       [35.44266626],\n",
       "       [24.54286797],\n",
       "       [20.92244781],\n",
       "       [16.20464352],\n",
       "       [27.10551186],\n",
       "       [28.05804536],\n",
       "       [21.24485679],\n",
       "       [29.42388279],\n",
       "       [24.09473709],\n",
       "       [29.13694094],\n",
       "       [24.36213082],\n",
       "       [20.18798792],\n",
       "       [18.22001799],\n",
       "       [44.02505925],\n",
       "       [ 4.72824262],\n",
       "       [19.37155457],\n",
       "       [17.39854952],\n",
       "       [23.98326371],\n",
       "       [ 7.423096  ],\n",
       "       [17.01009331],\n",
       "       [31.2644547 ],\n",
       "       [21.14782841],\n",
       "       [11.04927818],\n",
       "       [21.00359681],\n",
       "       [23.97163314]])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = house_predictor.predict(X_test)\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7ce2b6af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:24.511516Z",
     "iopub.status.busy": "2025-04-19T18:47:24.511209Z",
     "iopub.status.idle": "2025-04-19T18:47:24.521675Z",
     "shell.execute_reply": "2025-04-19T18:47:24.520075Z"
    },
    "papermill": {
     "duration": 0.018683,
     "end_time": "2025-04-19T18:47:24.523871",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.505188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 3.2429\n",
      "Mean Squared Error: 20.6877\n",
      "Root Mean Square: 4.5484\n"
     ]
    }
   ],
   "source": [
    "print(f\"Mean Absolute Error: {metrics.mean_absolute_error(y_test,y_pred):.4f}\")\n",
    "print(f\"Mean Squared Error: {metrics.mean_squared_error(y_test,y_pred):.4f}\")\n",
    "print(f\"Root Mean Square: {(np.sqrt(metrics.mean_squared_error(y_test,y_pred))):.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "88860b1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:24.539746Z",
     "iopub.status.busy": "2025-04-19T18:47:24.539453Z",
     "iopub.status.idle": "2025-04-19T18:47:24.545751Z",
     "shell.execute_reply": "2025-04-19T18:47:24.544496Z"
    },
    "papermill": {
     "duration": 0.016812,
     "end_time": "2025-04-19T18:47:24.547524",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.530712",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-9.68696752e-02  4.39366725e-02  4.06879802e-02  2.21236621e+00\n",
      "  -1.45083232e+01  3.97614280e+00  9.84686278e-03 -1.35437909e+00\n",
      "   2.93898795e-01 -1.21174924e-02 -8.68721190e-01  1.28288751e-02\n",
      "  -6.10251464e-01]]\n"
     ]
    }
   ],
   "source": [
    "print(house_predictor.coef_)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72c26de6",
   "metadata": {
    "papermill": {
     "duration": 0.005542,
     "end_time": "2025-04-19T18:47:24.559672",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.554130",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "> medv= −0.09687⋅crim+0.04394⋅zn+0.04069⋅indus+2.21237⋅chas−14.50832⋅nox+3.97614⋅rm+0.00985⋅age−1.35438⋅dis+0.29390⋅rad−0.01212⋅tax−0.86872⋅ptratio+0.01283⋅b−0.61025⋅lstat+β0"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "366f1500",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T16:24:21.623414Z",
     "iopub.status.busy": "2025-04-19T16:24:21.623042Z",
     "iopub.status.idle": "2025-04-19T16:24:21.630707Z",
     "shell.execute_reply": "2025-04-19T16:24:21.629895Z",
     "shell.execute_reply.started": "2025-04-19T16:24:21.623390Z"
    },
    "papermill": {
     "duration": 0.00509,
     "end_time": "2025-04-19T18:47:24.570174",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.565084",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The MAE value 3.2429 shows that, on avg , there is an error of 3.23 dollars between the actual and predicted values for the medv column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "80539336",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:24.583780Z",
     "iopub.status.busy": "2025-04-19T18:47:24.583271Z",
     "iopub.status.idle": "2025-04-19T18:47:24.602736Z",
     "shell.execute_reply": "2025-04-19T18:47:24.601563Z"
    },
    "papermill": {
     "duration": 0.028641,
     "end_time": "2025-04-19T18:47:24.604250",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.575609",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Actual</th>\n",
       "      <th>Predicted Value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[23.1]</td>\n",
       "      <td>[10.182963920557924]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[20.0]</td>\n",
       "      <td>[22.90028637645314]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[10.4]</td>\n",
       "      <td>[15.72507149959985]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[27.0]</td>\n",
       "      <td>[32.86874250104684]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[19.8]</td>\n",
       "      <td>[23.063054770618017]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>[28.7]</td>\n",
       "      <td>[31.26445469854292]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>[21.2]</td>\n",
       "      <td>[21.147828414265312]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>[10.8]</td>\n",
       "      <td>[11.049278179045928]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>[23.1]</td>\n",
       "      <td>[21.00359681259353]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>[21.9]</td>\n",
       "      <td>[23.97163313891636]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>101 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Actual       Predicted Value\n",
       "0    [23.1]  [10.182963920557924]\n",
       "1    [20.0]   [22.90028637645314]\n",
       "2    [10.4]   [15.72507149959985]\n",
       "3    [27.0]   [32.86874250104684]\n",
       "4    [19.8]  [23.063054770618017]\n",
       "..      ...                   ...\n",
       "96   [28.7]   [31.26445469854292]\n",
       "97   [21.2]  [21.147828414265312]\n",
       "98   [10.8]  [11.049278179045928]\n",
       "99   [23.1]   [21.00359681259353]\n",
       "100  [21.9]   [23.97163313891636]\n",
       "\n",
       "[101 rows x 2 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comparison = pd.DataFrame({\"Actual\": y_test.values.tolist(),\"Predicted Value\": y_pred.tolist()})\n",
    "comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "25bec8f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:24.624414Z",
     "iopub.status.busy": "2025-04-19T18:47:24.623999Z",
     "iopub.status.idle": "2025-04-19T18:47:24.827875Z",
     "shell.execute_reply": "2025-04-19T18:47:24.826763Z"
    },
    "papermill": {
     "duration": 0.216562,
     "end_time": "2025-04-19T18:47:24.829461",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.612899",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred = np.squeeze(y_pred)    \n",
    "y_test = np.squeeze(y_test)\n",
    "\n",
    "residuals = y_test - y_pred\n",
    "\n",
    "sns.scatterplot(x=y_pred, y=residuals)\n",
    "plt.axhline(0, color='red', linestyle='--')\n",
    "plt.xlabel(\"Predicted Values\")\n",
    "plt.ylabel(\"Residuals\")\n",
    "plt.title(\"Residual Plot\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7af1123b",
   "metadata": {
    "papermill": {
     "duration": 0.005545,
     "end_time": "2025-04-19T18:47:24.841662",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.836117",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- If most points are above the red line → Model is underpredicting\n",
    "\n",
    "- If most are below → Model is overpredicting\n",
    "\n",
    "**Scattered like noise across all predicted values: GREAT!** \n",
    "> No major bias in predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d94c2f20",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:24.854679Z",
     "iopub.status.busy": "2025-04-19T18:47:24.854314Z",
     "iopub.status.idle": "2025-04-19T18:47:24.860802Z",
     "shell.execute_reply": "2025-04-19T18:47:24.859801Z"
    },
    "papermill": {
     "duration": 0.014852,
     "end_time": "2025-04-19T18:47:24.862224",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.847372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(13,)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.values[1].shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e98e1934",
   "metadata": {
    "papermill": {
     "duration": 0.005614,
     "end_time": "2025-04-19T18:47:24.874256",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.868642",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Making Prediction on a single datapoint\n",
    "feauture should be in row vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "65880907",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:24.887327Z",
     "iopub.status.busy": "2025-04-19T18:47:24.887043Z",
     "iopub.status.idle": "2025-04-19T18:47:24.896907Z",
     "shell.execute_reply": "2025-04-19T18:47:24.895098Z"
    },
    "papermill": {
     "duration": 0.01903,
     "end_time": "2025-04-19T18:47:24.899060",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.880030",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[22.90028638]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "house_predictor.predict(X_test.values[1].reshape(1,-1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "df9242aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T18:47:24.912964Z",
     "iopub.status.busy": "2025-04-19T18:47:24.912566Z",
     "iopub.status.idle": "2025-04-19T18:47:24.920063Z",
     "shell.execute_reply": "2025-04-19T18:47:24.918943Z"
    },
    "papermill": {
     "duration": 0.016224,
     "end_time": "2025-04-19T18:47:24.921722",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.905498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20.0"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.values[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52389ff4",
   "metadata": {
    "papermill": {
     "duration": 0.005739,
     "end_time": "2025-04-19T18:47:24.934309",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.928570",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4f1ac31",
   "metadata": {
    "papermill": {
     "duration": 0.005772,
     "end_time": "2025-04-19T18:47:24.946308",
     "exception": false,
     "start_time": "2025-04-19T18:47:24.940536",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 3606821,
     "sourceId": 6700194,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10.219854,
   "end_time": "2025-04-19T18:47:25.873848",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-19T18:47:15.653994",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
